import os 
import torch 
import torch.nn as nn 
import torch.nn.functional as F 
import torchvision 
from torchvision import transforms 
from torchvision.utils import save_image

#--------------------------------Parameter configuration---------------------------------#

#28x28 colour image with 3 channels
image_size = 3 * 28 * 28 
h_dim = 400 
z_dim = 60
num_epochs = 300 
batch_size = 128 
learning_rate = 0.001 

# Create a folder
sample_dir = 'samples'
if not os.path.exists(sample_dir):
    os.makedirs(sample_dir)
                                     
dataset = torchvision.datasets.ImageFolder(root='painting/', 
                                            transform=transforms.Compose([
                                                transforms.Resize((28, 28)),
                                                # Keep color images
                                                transforms.ToTensor(), 
                                            ]))


#--------------------------------Defining the AVE model---------------------------------#

class VAE(nn.Module):
    def __init__(self, image_size=3 * 28 * 28, h_dim=400, z_dim=60):
        super(VAE, self).__init__()
        self.fc1 = nn.Linear(image_size, h_dim)
        self.fc2 = nn.Linear(h_dim, z_dim)
        self.fc3 = nn.Linear(h_dim, z_dim)
        
        self.fc4 = nn.Linear(z_dim, h_dim)
        self.fc5 = nn.Linear(h_dim, image_size)

    def encoder(self, x):
        h = F.relu(self.fc1(x))
        return self.fc2(h), self.fc3(h)
    
    def reparameterize(self, mu, log_var):
        std = torch.exp(log_var/2)
        eps = torch.randn_like(std)
        return mu + eps * std 

    def decoder(self, z):
        h = F.relu(self.fc4(z))
        # The output is a color image and the number of channels is 3
        return torch.sigmoid(self.fc5(h)).view(-1, 3, 28, 28) 

    
    def forward(self, x):
        mu, log_var = self.encoder(x)
        z = self.reparameterize(mu, log_var)
        x_reconst = self.decoder(z)
        return x_reconst, mu, log_var 
    

# Select the GPU and optimizer
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = VAE().to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

#--------------------------------Training model---------------------------------#
for epoch in range(num_epochs):
    for i, (x, _) in enumerate(dataset):
        # Samples are obtained and propagated forward
        x = x.to(device).view(-1, image_size)
        x_reconst, mu, log_var = model(x)

        # Calculate reconstruction losses and KL divergence (KL divergence is a measure of how similar two distributions are)
        reconst_loss = F.binary_cross_entropy(x_reconst.view(-1, 3 * 28 * 28), x.view(-1, 3 * 28 * 28), reduction='sum')
        kl_div = -0.5 * torch.sum(1 + log_var - mu.pow(2) - log_var.exp())

        # Backpropagation and optimization
        loss = reconst_loss + kl_div 
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i+1)%100 == 0:
            print('Epoch [{}/{}], Step [{}/{}], Reconst Loss: {:.4f}, KL Div:{:.4f}'.
                  format(epoch+1, num_epochs, i+1, len(dataset), reconst_loss.item(), kl_div.item()))

  #--------------------------------Generate image---------------------------------#
    
    # Test with the trained model
    with torch.no_grad():
        # Save the sampled image, that is, the new image generated by the latent vector z through the decoder
        # Randomly generated images
        z = torch.randn(batch_size, z_dim).to(device)
        out = model.decoder(z).view(-1, 3, 28, 28)
        save_image(out, os.path.join(sample_dir, 'sampled-{}.png'.format(epoch+1)))
        
        # Save the reconstructed image
        out, _, _ = model(x)
        x_concat = torch.cat([x.view(-1, 3, 28, 28), out.view(-1, 3, 28, 28)], dim=3)
        save_image(x_concat, os.path.join(sample_dir, 'reconst-{}.png'.format(epoch+1)))
